[package]
name = "cozo"
version = "0.7.6"
edition = "2021"
description = "A general-purpose, transactional, relational database that uses Datalog and focuses on graph data and algorithms"
authors = ["Ziyang Hu"]
license = "MPL-2.0"
homepage = "https://www.cozodb.org"
repository = "https://github.com/cozodb/cozo"
documentation = "https://docs.cozodb.org"
exclude = [
    "tests/*",
]

[features]
#! # Features

default = ["compact"]
## Enables the `minimal`, `requests` and `graph-algo` features.
compact = ["minimal"]
## Enables the `minimal`, `requests` and `graph-algo` features in single threaded mode.
##compact-single-threaded = ["minimal", "graph-algo"]
## Enables the `storage-sqlite` feature.
minimal = []
## Enables the [Sqlite](https://www.sqlite.org/index.html) backend,
## also allows backup and restore with Sqlite data files.
## Sqlite is easy to compile, has very low resource requirements and reasonable performance,
## but does not support much concurrency.
##storage-sqlite = ["dep:sqlite"]
##storage-sqlite-src = ["dep:sqlite3-src", "sqlite3-src/bundled"]
## Enables the [RocksDB](http://rocksdb.org/) backend.
## RocksDB is hard to compile on some platforms, uses more resources than SQLite,
## but is very performant and supports an extremely high level of concurrency.
## You can also [fine-tune](https://github.com/cozodb/cozo/blob/main/TUNING_ROCKSDB.md) RocksDB options.
##storage-rocksdb = ["dep:cozorocks"]
## Enables the graph algorithms.
##graph-algo = []
## Allows the utilities to make web requests to fetch data.
##requests = []
## Uses jemalloc as the global allocator, can make a difference in performance.
##jemalloc = ["dep:tikv-jemallocator-global", "cozorocks?/jemalloc"]
## Enables io-uring option for the RocksDB storage
##io-uring = ["cozorocks?/io-uring"]
## Polyfills for the WASM target
wasm = ["uuid/js"]

#! The following features are highly experimental:

## Enables the [Sled](https://github.com/spacejam/sled) backend.
## Sled is slower than Sqlite for the usual workload of Cozo, can use quite a lot of disk space,
## and may not be stable enough. In general you should use RocksDB instead.
## The Sled engine does not support time travel.
##storage-sled = ["dep:sled"]
## Enables the [TiKV](https://tikv.org/) client backend.
## The only reason that you may want to use this is that your data does not fit in a single machine.
## This engine is orders of magnitude slower than every other engine for graph traversals, due to the
## significant network overhead. Simple point-lookup queries are fine, though.
## The TiKV engine does not support time travel.
##storage-tikv = ["dep:tikv-client", "dep:tokio"]

#! # Recommendation for features to enable
#!
#! Generally you will want the `storage-sqlite` and `graph-algo` features enabled,
#! unless your environment makes compiling them difficult. The backup/restore functionalities
#! are only available if `storage-sqlite` is on. Without `graph-algo` you cannot use any graph algorithms
#! (utilities are still available),
#! which could be OK if you only want to deal with pure Datalog.
#!
#! The `requests` feature allows the database to make outgoing HTTP requests to fetch data
#! into queries -- only enable it if you need it.
#!
#! The `wasm` feature simply patches some functions so that they can compile on WASM platform,
#! which lacks some std implementations at the moment. (On WASM you must also enable `nothread`).
#! This feature will not work on any other platform.
#!
#! The `jemalloc` feature only makes sense for desktop and servers. It could improve performance,
#! sometimes substantially, but you need to benchmark for your use case. It also tends to break
#! builds on untested platforms. None of our prebuilt binaries have it enabled.
#!
#! Enable `storage-rocksdb` if you expect high concurrency or want better performance than SQLite,
#! but note that RocksDB is much more resource-hungry and takes long to compile.
#!
#! The other storage options are just for experimentation. We do not recommend using them.

[dependencies]
either = "1.11.0"
miette = { version = "5.10.0", features = ["fancy"] }
lazy_static = "1.4.0"
log = "0.4.21"
serde_json = "1.0.116"
serde = { version = "1.0.199" }
serde_derive = "1.0.199"
#serde_bytes = "0.11.14"
#rmp = "0.8.14"
#rmp-serde = "1.2.0"
#base64 = "0.22.0"
chrono = "0.4.38"
#chrono-tz = "0.9.0"
ordered-float = "4.2.0"
byteorder = "1.5.0"
itertools = "0.12.1"
pest = "2.7.9"
pest_derive = "2.7.9"
unicode-normalization = "0.1.23"
thiserror = "1.0.59"
uuid = { version = "1.8.0", features = ["v1", "v4", "serde"] }
rmp-serde = "1.3.0"
base64 = "0.22.1"
chrono-tz = "0.10.0"
casey = "0.4.0"

[target.'cfg(target_arch = "wasm32")'.dependencies]
js-sys = { version = "0.3.70" }
